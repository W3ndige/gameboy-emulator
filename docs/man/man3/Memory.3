.TH "Memory" 3 "Sun Dec 16 2018" "Gameboy Emulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Memory \- Class contains memory management unit logic\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <memory\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMemory\fP ()"
.br
.RI "Construct a new \fBMemory\fP object\&. "
.ti -1c
.RI "void \fBDisableBooting\fP ()"
.br
.RI "Set booting flag to false\&. "
.ti -1c
.RI "bool \fBIsBooting\fP ()"
.br
.RI "Return true if booting, otherwise false\&. "
.ti -1c
.RI "bool \fBLoadCartridge\fP (std::string rom_file)"
.br
.RI "Load cartridge ROM into memory, return true if loaded, false if exception occured\&. "
.ti -1c
.RI "void \fBLoadCartridgeHeader\fP ()"
.br
.RI "Load values from cartridge into the \fBCartidgeHeader\fP structure\&. "
.ti -1c
.RI "void \fBWriteByteMemory\fP (uint16_t address, uint8_t data)"
.br
.RI "Set the byte of memory array at address to value of data, while checking conditions\&. "
.ti -1c
.RI "void \fBPrivilagedByteWrite\fP (uint16_t address, uint8_t data)"
.br
.RI "Set the byte of memory array at address to value of data, without checking conditions\&. "
.ti -1c
.RI "void \fBWriteWordMemory\fP (uint16_t address, uint16_t data)"
.br
.RI "Set the word of memory at address, and address + 1, to the word of data, while checking conditions\&. "
.ti -1c
.RI "uint8_t \fBReadByteMemory\fP (uint16_t address)"
.br
.RI "Read the byte from memory, or set the state of joypad if address is 0xFF00\&. "
.ti -1c
.RI "uint8_t \fBPrivilagedReadByteMemory\fP (uint16_t address)"
.br
.RI "Read the byte from memory, without setting joypad state\&. "
.ti -1c
.RI "uint16_t \fBReadWordMemory\fP (uint16_t address)"
.br
.RI "Read the word from memory\&. "
.ti -1c
.RI "void \fBDumpMemory\fP ()"
.br
.RI "Load contents of memory to the file\&. "
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "uint8_t \fBjoypad_state\fP"
.br
.ti -1c
.RI "\fBCartidgeHeader\fP \fBcartridge_header\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBDMATransfer\fP (uint8_t data)"
.br
.RI "Read sprite RAM between memory adddress 0xFE00-0xFE9F\&. "
.ti -1c
.RI "uint8_t \fBGetJoypadState\fP ()"
.br
.RI "Get the Joypad State object\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBbooting\fP"
.br
.ti -1c
.RI "uint8_t \fBbootstrap\fP [\fBMAX_BOOTSTRAP_SIZE\fP]"
.br
.ti -1c
.RI "uint8_t \fBmemory\fP [\fBMAX_MEMORY_SIZE\fP]"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class contains memory management unit logic\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Memory::DMATransfer (uint8_t data)\fC [private]\fP"

.PP
Read sprite RAM between memory adddress 0xFE00-0xFE9F\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Bit shifted address from where sprite data is read\&. 
.RE
.PP

.SS "uint8_t Memory::GetJoypadState ()\fC [private]\fP"

.PP
Get the Joypad State object\&. 
.PP
\fBReturns:\fP
.RS 4
uint8_t State of joypad\&. 
.RE
.PP

.SS "bool Memory::IsBooting ()"

.PP
Return true if booting, otherwise false\&. 
.PP
\fBReturns:\fP
.RS 4
true \fBGameboy\fP is booting\&. 
.PP
false \fBGameboy\fP is not booting\&. 
.RE
.PP

.SS "bool Memory::LoadCartridge (std::string rom_file)"

.PP
Load cartridge ROM into memory, return true if loaded, false if exception occured\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrom_file\fP Name of the ROM file to load\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true Loading worked\&. 
.PP
false Exception in loading occured\&. 
.RE
.PP

.SS "void Memory::PrivilagedByteWrite (uint16_t address, uint8_t data)"

.PP
Set the byte of memory array at address to value of data, without checking conditions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP Offset in memory 
.br
\fIdata\fP Byte of data to write 
.RE
.PP
< Some system functions have to write beyond limits 
.SS "uint8_t Memory::PrivilagedReadByteMemory (uint16_t address)"

.PP
Read the byte from memory, without setting joypad state\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP offset in memory\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t Byte of data from memory\&. 
.RE
.PP

.SS "uint8_t Memory::ReadByteMemory (uint16_t address)"

.PP
Read the byte from memory, or set the state of joypad if address is 0xFF00\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP Offset in memory 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t Byte of data from memory\&. 
.RE
.PP
< If booting we want to read from bootstrap memory 
.SS "uint16_t Memory::ReadWordMemory (uint16_t address)"

.PP
Read the word from memory\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP offset in memory\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
uint16_t Word of data from memory\&. 
.RE
.PP
< Read word in little endian format 
.SS "void Memory::WriteByteMemory (uint16_t address, uint8_t data)"

.PP
Set the byte of memory array at address to value of data, while checking conditions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP Offset in memory 
.br
\fIdata\fP Byte of data value to write 
.RE
.PP
< Read Only \fBMemory\fP 
.SS "void Memory::WriteWordMemory (uint16_t address, uint16_t data)"

.PP
Set the word of memory at address, and address + 1, to the word of data, while checking conditions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP Offset in memory 
.br
\fIdata\fP Word of data to write 
.RE
.PP

.SH "Field Documentation"
.PP 
.SS "bool Memory::booting\fC [private]\fP"
State of booting the \fBGameboy\fP 
.SS "uint8_t Memory::bootstrap[\fBMAX_BOOTSTRAP_SIZE\fP]\fC [private]\fP"
\fBInitial value:\fP
.PP
.nf
= { 
            0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB,
            0x21, 0x26, 0xFF, 0x0E, 0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3,
            0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0, 0x47, 0x11, 0x04, 0x01,
            0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
            0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22,
            0x23, 0x05, 0x20, 0xF9, 0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99,
            0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20, 0xF9, 0x2E, 0x0F, 0x18,
            0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
            0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20,
            0xF7, 0x1D, 0x20, 0xF2, 0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62,
            0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, 0x7B, 0xE2, 0x0C, 0x3E,
            0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
            0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17,
            0xC1, 0xCB, 0x11, 0x17, 0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9,
            0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83,
            0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
            0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63,
            0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
            0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C, 0x21, 0x04, 0x01, 0x11,
            0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
            0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE,
            0x3E, 0x01, 0xE0, 0x50}
.fi
256B of bootstrap memory 
.SS "\fBCartidgeHeader\fP Memory::cartridge_header"
Contains information about the cartridge header 
.SS "uint8_t Memory::joypad_state"
State of the joypad 
.SS "uint8_t Memory::memory[\fBMAX_MEMORY_SIZE\fP]\fC [private]\fP"
64KB of memory 

.SH "Author"
.PP 
Generated automatically by Doxygen for Gameboy Emulator from the source code\&.
